# -*- coding: utf-8 -*-
"""movie review classification using nn(text classification).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j_Ld3yA6atNx8kecnILcpJfoe9lDpz3E

#This model classifies a movie review as good or bad
"""

import tensorflow as tf
from tensorflow import keras
import numpy
import matplotlib.pyplot as plt
 
data = keras.datasets.imdb#database related to movies,tv

(train_data, train_labels), (test_data, test_labels) = data.load_data(num_words=88000) #consider words that are 88000 most frequent

print(train_data[0])#these are integer encoded words

#dictionary with integers and mapping to words
word_index=data.get_word_index()#this gives us the tuples with that word

word_index={k:(v+3) for k,v in word_index.items()}#gives us the dictionary.k-key-word,v-value-integer
word_index["<PAD>"]=0#TO MAKE EACH MOVIE REVIEW SAME LENGTH
word_index["<START>"]=1
word_index["<UNK>"]=2#UNKOWN
word_index["<UNUSED>"]=3

#swap(reverse) all to make it keys and then values
reverse_word_index=dict([(value,key) for (key,value) in word_index.items() ])

print(len(test_data[0]), len(test_data[1]))#it shows there are different length for different reviews

#so to solve the above problem, we need to pad the length of each review with the length of the highest review
train_data=keras.preprocessing.sequence.pad_sequences(train_data,value=word_index["<PAD>"], padding="post", maxlen=250)#post means pad after the data
test_data=keras.preprocessing.sequence.pad_sequences(test_data,value=word_index["<PAD>"], padding="post", maxlen=250)

print(len(test_data[0]), len(test_data[1]))#now its solves the problem. Every data has same length of 250

#to decode training and testing data to human readable words
def decode_review(text):
  return " ".join([reverse_word_index.get(i, "?") for i in text])

print(decode_review(test_data[1]))#prints the decoded data

#model
model=keras.Sequential()
model.add(keras.layers.Embedding(88000,16))#88000 word vectors and each one represents one word
model.add(keras.layers.GlobalAveragePooling1D())#convert higher dimensional data to a lower dimensional one
model.add(keras.layers.Dense(16,activation="relu"))#16 is standard number of neurons, you can change the number
model.add(keras.layers.Dense(1,activation="sigmoid"))

model.summary()

model.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

#Validation data. total size of data is 25000

x_val = train_data[:10000]
x_train = train_data[10000:]

y_val = train_labels[:10000]
y_train = train_labels[10000:]

history = model.fit(x_train, y_train, epochs=40, batch_size=512, validation_data=(x_val, y_val), verbose=1)

results=model.evaluate(test_data,test_labels)

print(results)#it has both loss and accuracy

model.save("model.h5")#h5 is the extension for saved model in tensorflow

model=keras.models.load_model("model.h5")

plt.plot(history.history['accuracy'])
plt.title("model accuracy")
plt.ylabel("accuracy")
plt.xlabel("epochs")
plt.show()